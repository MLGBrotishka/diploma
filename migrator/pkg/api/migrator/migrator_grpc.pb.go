// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: migrator/migrator.proto

package migrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MigrationService_CreateMigration_FullMethodName   = "/migration.MigrationService/CreateMigration"
	MigrationService_ApplyMigration_FullMethodName    = "/migration.MigrationService/ApplyMigration"
	MigrationService_RollbackMigration_FullMethodName = "/migration.MigrationService/RollbackMigration"
	MigrationService_ListMigrations_FullMethodName    = "/migration.MigrationService/ListMigrations"
	MigrationService_GetMigration_FullMethodName      = "/migration.MigrationService/GetMigration"
)

// MigrationServiceClient is the client API for MigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MigrationService - сервис для управления миграциями
type MigrationServiceClient interface {
	// Создание новой миграции
	CreateMigration(ctx context.Context, in *CreateMigrationRequest, opts ...grpc.CallOption) (*CreateMigrationResponse, error)
	// Применение миграций
	ApplyMigration(ctx context.Context, in *ApplyMigrationRequest, opts ...grpc.CallOption) (*ApplyMigrationResponse, error)
	// Откат миграции
	RollbackMigration(ctx context.Context, in *RollbackMigrationRequest, opts ...grpc.CallOption) (*RollbackMigrationResponse, error)
	// Получение списка миграций
	ListMigrations(ctx context.Context, in *ListMigrationsRequest, opts ...grpc.CallOption) (*ListMigrationsResponse, error)
	// Получение конкретной миграции
	GetMigration(ctx context.Context, in *GetMigrationRequest, opts ...grpc.CallOption) (*GetMigrationResponse, error)
}

type migrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationServiceClient(cc grpc.ClientConnInterface) MigrationServiceClient {
	return &migrationServiceClient{cc}
}

func (c *migrationServiceClient) CreateMigration(ctx context.Context, in *CreateMigrationRequest, opts ...grpc.CallOption) (*CreateMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMigrationResponse)
	err := c.cc.Invoke(ctx, MigrationService_CreateMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) ApplyMigration(ctx context.Context, in *ApplyMigrationRequest, opts ...grpc.CallOption) (*ApplyMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyMigrationResponse)
	err := c.cc.Invoke(ctx, MigrationService_ApplyMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) RollbackMigration(ctx context.Context, in *RollbackMigrationRequest, opts ...grpc.CallOption) (*RollbackMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackMigrationResponse)
	err := c.cc.Invoke(ctx, MigrationService_RollbackMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) ListMigrations(ctx context.Context, in *ListMigrationsRequest, opts ...grpc.CallOption) (*ListMigrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMigrationsResponse)
	err := c.cc.Invoke(ctx, MigrationService_ListMigrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) GetMigration(ctx context.Context, in *GetMigrationRequest, opts ...grpc.CallOption) (*GetMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMigrationResponse)
	err := c.cc.Invoke(ctx, MigrationService_GetMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServiceServer is the server API for MigrationService service.
// All implementations must embed UnimplementedMigrationServiceServer
// for forward compatibility.
//
// MigrationService - сервис для управления миграциями
type MigrationServiceServer interface {
	// Создание новой миграции
	CreateMigration(context.Context, *CreateMigrationRequest) (*CreateMigrationResponse, error)
	// Применение миграций
	ApplyMigration(context.Context, *ApplyMigrationRequest) (*ApplyMigrationResponse, error)
	// Откат миграции
	RollbackMigration(context.Context, *RollbackMigrationRequest) (*RollbackMigrationResponse, error)
	// Получение списка миграций
	ListMigrations(context.Context, *ListMigrationsRequest) (*ListMigrationsResponse, error)
	// Получение конкретной миграции
	GetMigration(context.Context, *GetMigrationRequest) (*GetMigrationResponse, error)
	mustEmbedUnimplementedMigrationServiceServer()
}

// UnimplementedMigrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMigrationServiceServer struct{}

func (UnimplementedMigrationServiceServer) CreateMigration(context.Context, *CreateMigrationRequest) (*CreateMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMigration not implemented")
}
func (UnimplementedMigrationServiceServer) ApplyMigration(context.Context, *ApplyMigrationRequest) (*ApplyMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMigration not implemented")
}
func (UnimplementedMigrationServiceServer) RollbackMigration(context.Context, *RollbackMigrationRequest) (*RollbackMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackMigration not implemented")
}
func (UnimplementedMigrationServiceServer) ListMigrations(context.Context, *ListMigrationsRequest) (*ListMigrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMigrations not implemented")
}
func (UnimplementedMigrationServiceServer) GetMigration(context.Context, *GetMigrationRequest) (*GetMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigration not implemented")
}
func (UnimplementedMigrationServiceServer) mustEmbedUnimplementedMigrationServiceServer() {}
func (UnimplementedMigrationServiceServer) testEmbeddedByValue()                          {}

// UnsafeMigrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationServiceServer will
// result in compilation errors.
type UnsafeMigrationServiceServer interface {
	mustEmbedUnimplementedMigrationServiceServer()
}

func RegisterMigrationServiceServer(s grpc.ServiceRegistrar, srv MigrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedMigrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MigrationService_ServiceDesc, srv)
}

func _MigrationService_CreateMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).CreateMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_CreateMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).CreateMigration(ctx, req.(*CreateMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_ApplyMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).ApplyMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_ApplyMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).ApplyMigration(ctx, req.(*ApplyMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_RollbackMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).RollbackMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_RollbackMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).RollbackMigration(ctx, req.(*RollbackMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_ListMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMigrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).ListMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_ListMigrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).ListMigrations(ctx, req.(*ListMigrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_GetMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).GetMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_GetMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).GetMigration(ctx, req.(*GetMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrationService_ServiceDesc is the grpc.ServiceDesc for MigrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "migration.MigrationService",
	HandlerType: (*MigrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMigration",
			Handler:    _MigrationService_CreateMigration_Handler,
		},
		{
			MethodName: "ApplyMigration",
			Handler:    _MigrationService_ApplyMigration_Handler,
		},
		{
			MethodName: "RollbackMigration",
			Handler:    _MigrationService_RollbackMigration_Handler,
		},
		{
			MethodName: "ListMigrations",
			Handler:    _MigrationService_ListMigrations_Handler,
		},
		{
			MethodName: "GetMigration",
			Handler:    _MigrationService_GetMigration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "migrator/migrator.proto",
}
